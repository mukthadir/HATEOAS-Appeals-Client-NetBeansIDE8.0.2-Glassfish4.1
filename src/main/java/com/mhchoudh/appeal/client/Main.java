package com.mhchoudh.appeal.client;

import static com.mhchoudh.appeal.model.AppealBuilder.appeal;

import java.net.URI;
import java.net.URISyntaxException;

import com.mhchoudh.appeal.client.activities.Actions;
import com.mhchoudh.appeal.client.activities.GetReplyActivity;
import com.mhchoudh.appeal.client.activities.FormatActivity;
import com.mhchoudh.appeal.client.activities.PlaceAppealActivity;
import com.mhchoudh.appeal.client.activities.ReadAppealActivity;
import com.mhchoudh.appeal.client.activities.UpdateAppealActivity;
import com.mhchoudh.appeal.model.Appeal;
import com.mhchoudh.appeal.model.AppealStatus;
import com.mhchoudh.appeal.model.AppealFormat;
import com.mhchoudh.appeal.representations.Link;
import com.mhchoudh.appeal.representations.AppealRepresentation;
import com.mhchoudh.appeal.representations.FormatAppealRepresentation;
import com.mhchoudh.appeal.representations.ReplyRepresentation;
import com.mhchoudh.appeal.representations.CSE564AppealsUri;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Main {
    
    private static final Logger LOG = LoggerFactory.getLogger(Main.class);
    
    private static final String APPEALS_MEDIA_TYPE = "application/vnd.cse564-appeals+xml"; 
    
    private static final String ENTRY_POINT_URI = "http://localhost:8080/HATEOAS-Appeals-mhchoudh-NetBeansIDE8.0.2-Glassfish4.1/webresources/appeal";
    
    private static int uniqueID;
  
    
    public static void main(String[] args) throws Exception {
        URI serviceUri = new URI(ENTRY_POINT_URI);
        uniqueID = 10;
        happyPathTest(serviceUri);
        abandonedPathTest(serviceUri);
        forgottenCaseTest(serviceUri);
        badStartPathTest(serviceUri);
        badIDtest(serviceUri);
    }
    
    private static void happyPathTest(URI serviceUri) throws Exception {
        LOG.info("Step 1: Grades are posted by the professor with comments.");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 2: Student reviewing the grades and comments");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 3: Student rechecking his works against Professor's comments");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 4: Student identifies areas where he did work where Professor claimed he did not");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 5: The student starts composing the appeal");
//        Thread.sleep(1000);
        System.out.println();
        Appeal appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal\n{}", appeal);
//        Thread.sleep(1000);
        System.out.println();
        Client client = Client.create();
        LOG.debug("Created client {}", client);
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Starting to Test Case 1: Happy Case with Service URI {}", serviceUri);
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Placing the appeal on the server");
//        Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to start happy case test. Placing appeal at [%s] via POST", serviceUri.toString()));
//        Thread.sleep(1000);
        System.out.println();
        AppealRepresentation appealRepresentation = client.resource(serviceUri).accept(APPEALS_MEDIA_TYPE).type(APPEALS_MEDIA_TYPE).post(AppealRepresentation.class, new ClientAppeal(appeal));
        LOG.debug("Created appealRepresentation {} denoted by the URI {}", appealRepresentation, appealRepresentation.getSelfLink().getUri().toString());
//        Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Appeal saved at [%s]", appealRepresentation.getSelfLink().getUri().toString()));
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Student feels his appeal is not upto the mark. So, he updates the appeal");
    //    Thread.sleep(1000);
        System.out.println();    
        LOG.debug("Updating the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to update appeal at [%s] via POST", appealRepresentation.getUpdateLink().getUri().toString()));
        appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal {}", appeal);
        Link updateLink = appealRepresentation.getUpdateLink();
        LOG.debug("Created appeal update link {}", updateLink);
        AppealRepresentation updatedRepresentation = client.resource(updateLink.getUri()).accept(updateLink.getMediaType()).type(updateLink.getMediaType()).post(AppealRepresentation.class, new AppealRepresentation(appeal));
        LOG.debug("Created updated appeal representation link {}", updatedRepresentation);
        System.out.println(String.format("Appeal updated at [%s]", updatedRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        
        LOG.debug("Step 6: Student formats the appeal as per the instructions in the syllabus");
//        Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to create a format appeal resource at [%s] via PUT", appealRepresentation.getFormatAppealLink().getUri().toString()));
//        Thread.sleep(1000);
        System.out.println();
        Link formatAppealLink = appealRepresentation.getFormatAppealLink();
        LOG.debug("Created format appeal link {} for updated appeal representation {}", formatAppealLink, appealRepresentation);
//        Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getRelValue() = {}", formatAppealLink.getRelValue());
//        Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getUri() = {}", formatAppealLink.getUri());
//        Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getMediaType() = {}", formatAppealLink.getMediaType());
//        Thread.sleep(1000);
        System.out.println();
        AppealFormat format = new AppealFormat("Frank.Calliss@asu.edu", "mhchoudh@asu.edu", "APPEAL CSE564 - Exam 1", uniqueID++);
        LOG.debug("Created new format Appeal object {}", format);
//        Thread.sleep(1000);
        System.out.println();
        LOG.debug("Created new format appeal object type {}", formatAppealLink.getMediaType());
//        Thread.sleep(1000);
        System.out.println();
        FormatAppealRepresentation  formatAppealRepresentation = client.resource(formatAppealLink.getUri()).accept(formatAppealLink.getMediaType()).type(formatAppealLink.getMediaType()).put(FormatAppealRepresentation.class, new FormatAppealRepresentation(format));        
        LOG.debug("Created new format representation {}", formatAppealRepresentation);
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Printing the eMail before sending it");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("From: {}", format.getEmailSender() );
        System.out.println();
        LOG.info("Subject: {}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n{}", appeal);
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("Saving the unique ID {} of the appeal in case need following up at a later stage.", format.getExpiryYear());
        System.out.println();
        System.out.println();
        LOG.info("eMail Ready to send");
        System.out.println();
        System.out.println(String.format("Appeal sent after formatting, waiting for reply from Professor at [%s]", formatAppealRepresentation.getReplyLink().getUri().toString()));
//        Thread.sleep(1000);
        System.out.println();
//        Thread.sleep(2000);
        LOG.info("Step 7: Professor reviewing the appeal");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 8: Professor rechecking work");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Professor feels the appeal is legitimate and decides to approve the appeal");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 9: Professor composing a reply for sending to the student");
//        Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Professor ready to send a reply to the student from [%s] via GET", formatAppealRepresentation.getReplyLink().getUri().toString()));
//        Thread.sleep(1000);
        System.out.println();
        Link replyLink = formatAppealRepresentation.getReplyLink();
        LOG.debug("Retrieved the reply link {} for format represntation {}", replyLink, formatAppealRepresentation);
//        Thread.sleep(1000);
        System.out.println();
        ReplyRepresentation replyRepresentation = client.resource(replyLink.getUri()).get(ReplyRepresentation.class);
        LOG.info("Reply recieved, reply mail is as follows");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailSender());
        System.out.println();
        LOG.info("From: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("Subject: Re:{}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n\t\t\t{}", replyRepresentation.getReply());
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        System.out.println();
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 10: Professor upgrades the grade in the class gradebook");
//        Thread.sleep(1000);
        System.out.println();
        LOG.info("Going to Test Case 2: Abandoned Case");
    }

    private static void abandonedPathTest(URI serviceUri) throws Exception{
        LOG.info("Inside abandoned Case Tester now");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Steps 1 through 4 are the same as previous case. So, we start from 5th Step.");
    //    Thread.sleep(1000);
        System.out.println();        
        LOG.info("Step 5: The student starts composing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        Appeal appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal\n{}", appeal);
    //    Thread.sleep(1000);
        System.out.println();
        Client client = Client.create();
        LOG.debug("Created client {}", client);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Starting to Test Case 2: Abandoned Case with Service URI {}", serviceUri);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Placing the appeal on the server");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to start happy case test. Placing appeal at [%s] via POST", serviceUri.toString()));
    //    Thread.sleep(1000);
        System.out.println();
        AppealRepresentation appealRepresentation = client.resource(serviceUri).accept(APPEALS_MEDIA_TYPE).type(APPEALS_MEDIA_TYPE).post(AppealRepresentation.class, new ClientAppeal(appeal));
        LOG.debug("Created appealRepresentation {} denoted by the URI {}", appealRepresentation, appealRepresentation.getSelfLink().getUri().toString());
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Appeal saved at [%s]", appealRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Student feels his appeal is not upto the mark. So, he updates the appeal");
    //    Thread.sleep(1000);
        System.out.println();    
        LOG.debug("Updating the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to update appeal at [%s] via POST", appealRepresentation.getUpdateLink().getUri().toString()));
        appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal {}", appeal);
        Link updateLink = appealRepresentation.getUpdateLink();
        LOG.debug("Created appeal update link {}", updateLink);
        AppealRepresentation updatedRepresentation = client.resource(updateLink.getUri()).accept(updateLink.getMediaType()).type(updateLink.getMediaType()).post(AppealRepresentation.class, new AppealRepresentation(appeal));
        LOG.debug("Created updated appeal representation link {}", updatedRepresentation);
        System.out.println(String.format("Appeal updated at [%s]", updatedRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Student still feels his appeal is not upto the mark. So, he updates the appeal once again");
    //    Thread.sleep(1000);
        System.out.println();    
        LOG.debug("Updating the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to update appeal at [%s] via POST", appealRepresentation.getUpdateLink().getUri().toString()));
        appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal {}", appeal);
        Link updateLink1 = appealRepresentation.getUpdateLink();
        LOG.debug("Created appeal update link {}", updateLink1);
        AppealRepresentation updatedRepresentation1 = client.resource(updateLink1.getUri()).accept(updateLink1.getMediaType()).type(updateLink1.getMediaType()).post(AppealRepresentation.class, new AppealRepresentation(appeal));
        LOG.debug("Created updated appeal representation link {}", updatedRepresentation1);
        System.out.println(String.format("Appeal updated at [%s]", updatedRepresentation1.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Student still feels his appeal is not upto the mark. So, he decides to abandon the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Deleting the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to delete appeal at [%s] via DELETE", appealRepresentation.getCancelLink().getUri().toString()));
        Link deleteLink = appealRepresentation.getCancelLink();
        LOG.debug("Created appeal delete link {}", deleteLink);
        
        ClientResponse deleteResponse = client.resource(deleteLink.getUri()).delete(ClientResponse.class);
        LOG.debug("Checking the status of delete response -> {}", deleteResponse.getStatus());
        if(deleteResponse.getStatus() == 200){
            LOG.info("Appeal Successfully Deleted");
        }else{
            LOG.info("Appeal can not be deleted as the student has already sent the appeal to the Professor");
        }
        Thread.sleep(1000);
        System.out.println();
        LOG.info("Going to Test Case 3: Forgotten Case");
    }
   
    private static void forgottenCaseTest (URI serviceUri) throws Exception{
        LOG.info("Inside thee Forgotten Case Tester now");
        System.out.println();
        LOG.info("Inside abandoned Case Tester now");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Steps 1 through 4 are the same as previous case. So, we start from 5th Step.");
    //    Thread.sleep(1000);
        System.out.println();        
        LOG.info("Step 5: The student starts composing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        Appeal appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal\n{}", appeal);
    //    Thread.sleep(1000);
        System.out.println();
        Client client = Client.create();
        LOG.debug("Created client {}", client);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Starting to Test Case 2: Abandoned Case with Service URI {}", serviceUri);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Placing the appeal on the server");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to start happy case test. Placing appeal at [%s] via POST", serviceUri.toString()));
    //    Thread.sleep(1000);
        System.out.println();
        AppealRepresentation appealRepresentation = client.resource(serviceUri).accept(APPEALS_MEDIA_TYPE).type(APPEALS_MEDIA_TYPE).post(AppealRepresentation.class, new ClientAppeal(appeal));
        LOG.debug("Created appealRepresentation {} denoted by the URI {}", appealRepresentation, appealRepresentation.getSelfLink().getUri().toString());
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Appeal saved at [%s]", appealRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Student feels his appeal is not upto the mark. So, he updates the appeal");
    //    Thread.sleep(1000);
        System.out.println();    
        LOG.debug("Updating the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to update appeal at [%s] via POST", appealRepresentation.getUpdateLink().getUri().toString()));
        appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal {}", appeal);
        Link updateLink = appealRepresentation.getUpdateLink();
        LOG.debug("Created appeal update link {}", updateLink);
        AppealRepresentation updatedRepresentation = client.resource(updateLink.getUri()).accept(updateLink.getMediaType()).type(updateLink.getMediaType()).post(AppealRepresentation.class, new AppealRepresentation(appeal));
        LOG.debug("Created updated appeal representation link {}", updatedRepresentation);
        System.out.println(String.format("Appeal updated at [%s]", updatedRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Step 6: Student formats the appeal as per the instructions in the syllabus");
//        Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to create a format appeal resource at [%s] via PUT", appealRepresentation.getFormatAppealLink().getUri().toString()));
//        Thread.sleep(1000);
        System.out.println();
        Link formatAppealLink = appealRepresentation.getFormatAppealLink();
        LOG.debug("Created format appeal link {} for updated appeal representation {}", formatAppealLink, appealRepresentation);
        System.out.println();
        LOG.debug("formatAppealLink.getRelValue() = {}", formatAppealLink.getRelValue());
        System.out.println();
        LOG.debug("formatAppealLink.getUri() = {}", formatAppealLink.getUri());
        System.out.println();
        LOG.debug("formatAppealLink.getMediaType() = {}", formatAppealLink.getMediaType());
        System.out.println();
        AppealFormat format = new AppealFormat("Frank.Calliss@asu.edu", "mhchoudh@asu.edu", "APPEAL CSE564 - Exam 1", uniqueID++);
        LOG.debug("Created new format Appeal object {}", format);
        System.out.println();
        LOG.debug("Created new format appeal object type {}", formatAppealLink.getMediaType());
        System.out.println();
        FormatAppealRepresentation formatAppealRepresentation = client.resource(formatAppealLink.getUri()).accept(formatAppealLink.getMediaType()).type(formatAppealLink.getMediaType()).put(FormatAppealRepresentation.class, new FormatAppealRepresentation(format));        
        LOG.debug("Created new format representation {}", formatAppealRepresentation);
        System.out.println();
        LOG.info("Printing the eMail before sending it");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("From: {}", format.getEmailSender() );
        System.out.println();
        LOG.info("Subject: {}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n{}", appeal);
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("Saving the unique ID {} of the appeal in case need following up at a later stage", format.getExpiryYear());
        System.out.println();
        System.out.println();
        LOG.info("eMail Ready to send");
        System.out.println();
        System.out.println(String.format("Appeal sent after formatting, waiting for reply from Professor at [%s]", formatAppealRepresentation.getReplyLink().getUri().toString()));
        System.out.println(); 
        System.out.println("After a week, the student decides to follow up on the appeal as he hasn't heard back from the Professor till now");
        System.out.println();
        LOG.info("Retrieving the unique ID associated with the eMail sent to the Professor regarding appeal.");
        System.out.println();
        LOG.info("Unique ID retrieved. Unique ID = {}", format.getExpiryYear());
        System.out.println();
        LOG.info("Getting the eMail associated with this unique ID");
        System.out.println();
        System.out.println("Email Retrieved.");
        System.out.println();
         LOG.info("Printing the eMail before following up");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("From: {}", format.getEmailSender() );
        System.out.println();
        LOG.info("Subject: {} - Following up", format.getSubject());
        System.out.println();
        LOG.info("Body: \n{}", appeal);
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("eMail Ready to send");
        System.out.println();
        System.out.println(String.format("Appeal sent after formatting, waiting for reply from Professor at [%s]", formatAppealRepresentation.getReplyLink().getUri().toString()));
        System.out.println();
        LOG.info("Step 7: Professor reviewing the appeal");
        System.out.println();
        LOG.info("Step 8: Professor rechecking work");
        System.out.println();
        LOG.info("Professor feels the appeal is not legitimate and decides not to approve the appeal");
        System.out.println();
        LOG.info("Step 9: Professor composing a reply for sending to the student");
        System.out.println();
        System.out.println(String.format("Professor ready to send a reply to the student from [%s] via GET", formatAppealRepresentation.getReplyLink().getUri().toString()));
        System.out.println();
        Link replyLink = formatAppealRepresentation.getReplyLink();
        LOG.debug("Retrieved the reply link {} for format represntation {}", replyLink, formatAppealRepresentation);
        System.out.println();
        ReplyRepresentation replyRepresentation = client.resource(replyLink.getUri()).get(ReplyRepresentation.class);
        LOG.info("Reply recieved, reply mail is as follows");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailSender());
        System.out.println();
        LOG.info("From: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("Subject: Re:{}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n\t\t\t{}", replyRepresentation.getRejectReply());
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        System.out.println();
        System.out.println();
        LOG.info("Step 10: Professor does not upgrades the grade in the class gradebook");
        System.out.println();
        LOG.info("Going to Test Case 4: Bad Start");
    }
        
    private static void badStartPathTest(URI serviceUri) throws Exception{    
        LOG.info("Inside the bad Start case Tester now");
        System.out.println();
        LOG.info("Steps 1 through 4 are the same as previous case. So, we start from 5th Step.");    
    //    Thread.sleep(1000);
        System.out.println();        
        LOG.info("Step 5: The student starts composing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        Appeal appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal\n{}", appeal);
    //    Thread.sleep(1000);
        System.out.println();
        Client client = Client.create();
        LOG.debug("Created client {}", client);
    //    Thread.sleep(1000);
        System.out.println(); 
        LOG.info("Starting to Test Case 4: Bad Start Case with bad URI {}", serviceUri + "/bad");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Placing the appeal on the server");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to start bad start case test. Placing appeal at [%s] via POST", serviceUri.toString() + "/bad"));
    //    Thread.sleep(1000);
        System.out.println();
        
        if(!(serviceUri + "/bad").equals(ENTRY_POINT_URI)){
            System.out.println("Automated reply from program: Entry point URI is not correct. Please use correct entry point URI. Here is the correct entry point URI " + ENTRY_POINT_URI);
            System.out.println();
        }
        
        LOG.info("Placing the appeal on the server with correct entry point uri now");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Placing appeal at [%s] via POST", serviceUri.toString()));
    //    Thread.sleep(1000);
        System.out.println();
        
        AppealRepresentation appealRepresentation = client.resource(serviceUri).accept(APPEALS_MEDIA_TYPE).type(APPEALS_MEDIA_TYPE).post(AppealRepresentation.class, new ClientAppeal(appeal));
        LOG.debug("Created appealRepresentation {} denoted by the URI {}", appealRepresentation, appealRepresentation.getSelfLink().getUri().toString());
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Appeal saved at [%s]", appealRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        
        LOG.info("Try to update the appeal with incorrect uri");
        System.out.println();
        System.out.println(String.format("About to update the appeal with bad URI [%s] via POST", appealRepresentation.getUpdateLink().getUri().toString() + "/bad-uri"));
        System.out.println();
        Appeal appeal1 = appeal().withRandomItems().build();
        LOG.debug("Created base appeal \n{}", appeal1);
        System.out.println();
        Link badLink = new Link("bad", new CSE564AppealsUri(appealRepresentation.getSelfLink().getUri().toString() + "/bad-uri"), APPEALS_MEDIA_TYPE);
        LOG.debug("Create bad link {}", badLink);
        ClientResponse badUpdateResponse = client.resource(badLink.getUri()).accept(badLink.getMediaType()).type(badLink.getMediaType()).post(ClientResponse.class, new AppealRepresentation(appeal));
        LOG.debug("Created Bad Update Response {}", badUpdateResponse);
        System.out.println();
        System.out.println(String.format("Tried to update appeal with bad URI at [%s] via POST, outcome [%d]", badLink.getUri().toString(), badUpdateResponse.getStatus()));
        System.out.println();
        System.out.println(String.format("Outcome of the update [%d]",badUpdateResponse.getStatus()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Step 6: Student formats the appeal as per the instructions in the syllabus");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to create a format appeal resource at [%s] via PUT", appealRepresentation.getFormatAppealLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        Link formatAppealLink = appealRepresentation.getFormatAppealLink();
        LOG.debug("Created format appeal link {} for updated appeal representation {}", formatAppealLink, appealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getRelValue() = {}", formatAppealLink.getRelValue());
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getUri() = {}", formatAppealLink.getUri());
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getMediaType() = {}", formatAppealLink.getMediaType());
    //    Thread.sleep(1000);
        System.out.println();
        AppealFormat format = new AppealFormat("Frank.Calliss@asu.edu", "mhchoudh@asu.edu", "APPEAL CSE564 - Exam 1", uniqueID++);
        LOG.debug("Created new format Appeal object {}", format);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Created new format appeal object type {}", formatAppealLink.getMediaType());
    //    Thread.sleep(1000);
        System.out.println();
        FormatAppealRepresentation  formatAppealRepresentation = client.resource(formatAppealLink.getUri()).accept(formatAppealLink.getMediaType()).type(formatAppealLink.getMediaType()).put(FormatAppealRepresentation.class, new FormatAppealRepresentation(format));        
        LOG.debug("Created new format representation {}", formatAppealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Printing the eMail before sending it");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("From: {}", format.getEmailSender() );
        System.out.println();
        LOG.info("Subject: {}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n{}", appeal);
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("Saving the unique ID {} of the appeal in case need following up at a later stage.", format.getExpiryYear());
        System.out.println();
        System.out.println();
        LOG.info("eMail Ready to send");
        System.out.println();
        System.out.println(String.format("Appeal sent after formatting, waiting for reply from Professor at [%s]", formatAppealRepresentation.getReplyLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
    //    Thread.sleep(2000);
        LOG.info("Step 7: Professor reviewing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 8: Professor rechecking work");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Professor feels the appeal is legitimate and decides to approve the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 9: Professor composing a reply for sending to the student");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Professor ready to send a reply to the student from [%s] via GET", formatAppealRepresentation.getReplyLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        Link replyLink = formatAppealRepresentation.getReplyLink();
        LOG.debug("Retrieved the reply link {} for format represntation {}", replyLink, formatAppealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        ReplyRepresentation replyRepresentation = client.resource(replyLink.getUri()).get(ReplyRepresentation.class);
        LOG.info("Reply recieved, reply mail is as follows");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailSender());
        System.out.println();
        LOG.info("From: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("Subject: Re:{}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n\t\t\t{}", replyRepresentation.getReply());
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        System.out.println();
        LOG.info("Step 10: Professor upgrades the grade in the class gradebook");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Going to Test Case 5: Bad ID Case");
    //    Thread.sleep(1000);
        System.out.println();
    }
    
    private static void badIDtest(URI serviceUri) throws Exception{
        LOG.info("Inside Bad ID Case Tester");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Steps 1 through 4 are the same as previous case. So, we start from 5th Step.");    
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 5: The student starts composing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        Appeal appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal\n{}", appeal);
    //    Thread.sleep(1000);
        System.out.println();
        Client client = Client.create();
        LOG.debug("Created client {}", client);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Starting to Test Case 5: Bad ID Case with Service URI {}", serviceUri);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Placing the appeal on the server");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to start happy case test. Placing appeal at [%s] via POST", serviceUri.toString()));
    //    Thread.sleep(1000);
        System.out.println();
        AppealRepresentation appealRepresentation = client.resource(serviceUri).accept(APPEALS_MEDIA_TYPE).type(APPEALS_MEDIA_TYPE).post(AppealRepresentation.class, new ClientAppeal(appeal));
        LOG.debug("Created appealRepresentation {} denoted by the URI {}", appealRepresentation, appealRepresentation.getSelfLink().getUri().toString());
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Appeal saved at [%s]", appealRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Step 6: Student formats the appeal as per the instructions in the syllabus");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to create a format appeal resource at [%s] via PUT", appealRepresentation.getFormatAppealLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        Link formatAppealLink = appealRepresentation.getFormatAppealLink();
        LOG.debug("Created format appeal link {} for updated appeal representation {}", formatAppealLink, appealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getRelValue() = {}", formatAppealLink.getRelValue());
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getUri() = {}", formatAppealLink.getUri());
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getMediaType() = {}", formatAppealLink.getMediaType());
    //    Thread.sleep(1000);
        System.out.println();
        AppealFormat format = new AppealFormat("Frank.Calliss@asu.edu", "mhchoudh@asu.edu", "APPEAL CSE564 - Exam 1", uniqueID++);
        LOG.debug("Created new format Appeal object {}", format);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Created new format appeal object type {}", formatAppealLink.getMediaType());
    //    Thread.sleep(1000);
        System.out.println();
        FormatAppealRepresentation  formatAppealRepresentation = client.resource(formatAppealLink.getUri()).accept(formatAppealLink.getMediaType()).type(formatAppealLink.getMediaType()).put(FormatAppealRepresentation.class, new FormatAppealRepresentation(format));        
        LOG.debug("Created new format representation {}", formatAppealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Printing the eMail before sending it");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("From: {}", format.getEmailSender() );
        System.out.println();
        LOG.info("Subject: {}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n{}", appeal);
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("Saving the unique ID {} of the appeal in case need following up at a later stage.", format.getExpiryYear());
        System.out.println();
        System.out.println();
        LOG.info("eMail Ready to send");
        System.out.println();
        
        System.out.println(String.format("Appeal sent after formatting, waiting for reply from Professor at [%s]", formatAppealRepresentation.getReplyLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println("After a week, the student decides to follow up on the appeal as he hasn't heard back from the Professor till now");
        System.out.println();
        System.out.println("Student realises that he has forgotten the ID of the appeal and since there are no other means to retrieve the appeal he decides to recompose the appeal and send once again.");
        System.out.println();
        LOG.info("Step 5: The student starts composing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        appeal = appeal().withRandomItems().build();
        LOG.debug("Created base appeal\n{}", appeal);
    //    Thread.sleep(1000);
        System.out.println();
        client = Client.create();
        LOG.debug("Created client {}", client);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Starting to Test Case 5: Bad ID Case with Service URI {}", serviceUri);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Placing the appeal on the server");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to start happy case test. Placing appeal at [%s] via POST", serviceUri.toString()));
    //    Thread.sleep(1000);
        System.out.println();
        appealRepresentation = client.resource(serviceUri).accept(APPEALS_MEDIA_TYPE).type(APPEALS_MEDIA_TYPE).post(AppealRepresentation.class, new ClientAppeal(appeal));
        LOG.debug("Created appealRepresentation {} denoted by the URI {}", appealRepresentation, appealRepresentation.getSelfLink().getUri().toString());
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Appeal saved at [%s]", appealRepresentation.getSelfLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Step 6: Student formats the appeal as per the instructions in the syllabus");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("About to create a format appeal resource at [%s] via PUT", appealRepresentation.getFormatAppealLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        formatAppealLink = appealRepresentation.getFormatAppealLink();
        LOG.debug("Created format appeal link {} for updated appeal representation {}", formatAppealLink, appealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getRelValue() = {}", formatAppealLink.getRelValue());
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getUri() = {}", formatAppealLink.getUri());
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("formatAppealLink.getMediaType() = {}", formatAppealLink.getMediaType());
    //    Thread.sleep(1000);
        System.out.println();
        format = new AppealFormat("Frank.Calliss@asu.edu", "mhchoudh@asu.edu", "APPEAL CSE564 - Exam 1", uniqueID++);
        LOG.debug("Created new format Appeal object {}", format);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.debug("Created new format appeal object type {}", formatAppealLink.getMediaType());
    //    Thread.sleep(1000);
        System.out.println();
        formatAppealRepresentation = client.resource(formatAppealLink.getUri()).accept(formatAppealLink.getMediaType()).type(formatAppealLink.getMediaType()).put(FormatAppealRepresentation.class, new FormatAppealRepresentation(format));        
        LOG.debug("Created new format representation {}", formatAppealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Printing the eMail before sending it");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("From: {}", format.getEmailSender() );
        System.out.println();
        LOG.info("Subject: {}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n{}", appeal);
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("Saving the unique ID {} of the appeal in case need following up at a later stage.", format.getExpiryYear());
        System.out.println();
        System.out.println();
        LOG.info("eMail Ready to send");
        System.out.println();
        System.out.println(String.format("Appeal sent after formatting, waiting for reply from Professor at [%s]", formatAppealRepresentation.getReplyLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();       
    //    Thread.sleep(2000);
        LOG.info("Step 7: Professor reviewing the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 8: Professor rechecking work");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Professor feels the appeal is not legitimate and decides not to approve the appeal");
    //    Thread.sleep(1000);
        System.out.println();
        LOG.info("Step 9: Professor composing a reply for sending to the student");
    //    Thread.sleep(1000);
        System.out.println();
        System.out.println(String.format("Professor ready to send a reply to the student from [%s] via GET", formatAppealRepresentation.getReplyLink().getUri().toString()));
    //    Thread.sleep(1000);
        System.out.println();
        Link replyLink = formatAppealRepresentation.getReplyLink();
        LOG.debug("Retrieved the reply link {} for format represntation {}", replyLink, formatAppealRepresentation);
    //    Thread.sleep(1000);
        System.out.println();
        ReplyRepresentation replyRepresentation = client.resource(replyLink.getUri()).get(ReplyRepresentation.class);
        LOG.info("Reply recieved, reply mail is as follows");
        System.out.println();
        System.out.println();
        LOG.info("--------------------------------------------------------------------------------------");
        System.out.println();
        LOG.info("To: {}", format.getEmailSender());
        System.out.println();
        LOG.info("From: {}", format.getEmailReceipient());
        System.out.println();
        LOG.info("Subject: Re:{}", format.getSubject());
        System.out.println();
        LOG.info("Body: \n\t\t\t{}", replyRepresentation.getRejectReply());
//        System.out.println();
        LOG.info("---------------------------------------------------------------------------------------");
        System.out.println();
        System.out.println();
            LOG.info("Step 10: Professor does not upgrade the grade in the class gradebook");
    //    Thread.sleep(1000);
        System.out.println();
    }
}